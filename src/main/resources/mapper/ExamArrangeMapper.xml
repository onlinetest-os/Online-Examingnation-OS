<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="phion.onlineexam.dao.ExamArrangeMapper">
<resultMap id="BaseResultMap" type="phion.onlineexam.bean.ExamArrange">
    <id column="arra_id" jdbcType="INTEGER" property="arraId" />
    <result column="stu_id" jdbcType="INTEGER" property="stuId" />
    <result column="e_id" jdbcType="INTEGER" property="eId" />
  </resultMap>
  <resultMap id="WithStudentResultMap" type="phion.onlineexam.bean.ExamArrange">
    <id column="arra_id" jdbcType="INTEGER" property="arraId" />
    <result column="stu_id" jdbcType="INTEGER" property="stuId" />
    <result column="e_id" jdbcType="INTEGER" property="eId" />
    <association property="student" />
  </resultMap>
  
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    arra_id, stu_id, e_id
  </sql>
  
  <select id="selectByExample" parameterType="phion.onlineexam.bean.ExamArrangeExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from tb_exam_arrange
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
<!--   List<ExamArrange> selectByExampleSelective(@Param("record") ExamArrange record, @Param("example") ExamArrangeExample example); -->
    <select id="selectByExampleSelective" parameterType="map" resultMap="BaseResultMap">
    select * from tb_exam_arrange
    <trim prefix="WHERE" prefixOverrides="AND|OR">
    <if test="record.arraId != null">
       and arra_id = #{record.arraId,jdbcType=INTEGER}
      </if>
      <if test="record.stuId != null">
       and stu_id = #{record.stuId,jdbcType=INTEGER}
      </if>
      <if test="record.eId != null">
       and e_id = #{record.eId,jdbcType=INTEGER}
      </if>
    </trim>
    
  </select>
  
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from tb_exam_arrange
    where arra_id = #{arraId,jdbcType=INTEGER}
  </select>
  
  
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from tb_exam_arrange
    where arra_id = #{arraId,jdbcType=INTEGER}
  </delete>
  
  <!-- int deleteByEId(Integer eId); -->
  <delete id="deleteByEId" parameterType="java.lang.Integer">
    delete from tb_exam_arrange
    where e_id = #{eId,jdbcType=INTEGER}
  </delete>
  
  <delete id="deleteByExample" parameterType="phion.onlineexam.bean.ExamArrangeExample">
    delete from tb_exam_arrange
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  
  <insert id="insert" parameterType="phion.onlineexam.bean.ExamArrange">
    insert into tb_exam_arrange (arra_id, stu_id, e_id
      )
    values (#{arraId,jdbcType=INTEGER}, #{stuId,jdbcType=INTEGER}, #{eId,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="phion.onlineexam.bean.ExamArrange">
    insert into tb_exam_arrange
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="arraId != null">
        arra_id,
      </if>
      <if test="stuId != null">
        stu_id,
      </if>
      <if test="eId != null">
        e_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="arraId != null">
        #{arraId,jdbcType=INTEGER},
      </if>
      <if test="stuId != null">
        #{stuId,jdbcType=INTEGER},
      </if>
      <if test="eId != null">
        #{eId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="phion.onlineexam.bean.ExamArrangeExample" resultType="java.lang.Long">
    select count(*) from tb_exam_arrange
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update tb_exam_arrange
    <set>
      <if test="record.arraId != null">
        arra_id = #{record.arraId,jdbcType=INTEGER},
      </if>
      <if test="record.stuId != null">
        stu_id = #{record.stuId,jdbcType=INTEGER},
      </if>
      <if test="record.eId != null">
        e_id = #{record.eId,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update tb_exam_arrange
    set arra_id = #{record.arraId,jdbcType=INTEGER},
      stu_id = #{record.stuId,jdbcType=INTEGER},
      e_id = #{record.eId,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="phion.onlineexam.bean.ExamArrange">
    update tb_exam_arrange
    <set>
      <if test="stuId != null">
        stu_id = #{stuId,jdbcType=INTEGER},
      </if>
      <if test="eId != null">
        e_id = #{eId,jdbcType=INTEGER},
      </if>
    </set>
    where arra_id = #{arraId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="phion.onlineexam.bean.ExamArrange">
    update tb_exam_arrange
    set stu_id = #{stuId,jdbcType=INTEGER},
      e_id = #{eId,jdbcType=INTEGER}
    where arra_id = #{arraId,jdbcType=INTEGER}
  </update>
</mapper>